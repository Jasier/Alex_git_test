server url used: https://github.com/Jasier/Alex_git_test.git

工作区：增删文件和内容
暂存区：键入命令 git add 改动的文件，此次改动就放到了 『暂存区』
本地仓库 ：键入命令 git commit ，此次改动就放到了『本地仓库』，每个 commit，我叫它为一个 『版本』
远程仓库：键入命令 git push 到远程仓库，此次改动就放到了 『远程仓库』


1. 回到远程仓库的状态
抛弃本地所有的更改，回到远程仓库的状态。
git fetch --all && git reset --hard origin/master

2. 重设第一个 commit
也就是把所有的改动都重新放回工作区，并清空所有的 commit，这样就可以重新提交第一个 commit 了。
git update-ref -d HEAD

3. 显示工作区和暂存区的不同
git diff

4. 显示本地仓库中任意两个 commit 之间的文件变动
git diff <commit-id> <commit-id>

5. 显示暂存区和本地仓库最近版本的不同
git diff --cached

6. 显示暂存区、工作区和本地仓库最近版本的不同
git diff HEAD

7. 快速切换到上一个分支
git checkout -

8. 移除已经合并到 master 的分支
git branch --merged master | grep -v '^\*\| master' | xargs -n 1 git branch -d

9. 显示本地分支关联远程仓库的情况
git branch -vv

10. 关联远程分支
关联之后，git branch -vv 就可以显示关联的远程分支名了，同时 Push 到远程仓库直接：git push，不需要指定远程仓库了。
git branch -u origin/<branch>
或者在 push 时加上 -u 参数
git push origin/<branch> -u

11. 举出所有远程分支
git branch -r

12. 举出本地和远程分支
git branch -a

13. 构建并切换到本地分支
git checkout -b <local_branch>

14. 从远程分支中构建并切换到本地分支
git checkout -b <local_branch> origin/<remote_branch>

15. 移除本地分支
git branch -d <local_branch>

16. 移除远程分支
git push origin --delete <remote_branch>

17. 重命名本地分支
git branch -m <new_branch_name>

18. 查看标签
git tag

19. 显示当前分支的最近的 tag
git describe --tags --abbrev=0

20. 查看标签详细信息
git tag -ln

21. 本地构建标签
默认 tag 是打在最近的一次 commit 上
git tag <version_number>
如果需要指定 commit 打 tag
git tag -a <version_number> -m "v1.0 发布 (描述)" <commit_id>

22. Push 标签到远程仓库
首先要保证本地构建好了标签才可以 Push 标签到远程仓库
git push origin <local_version_number>
一次性 Push 所有标签，同步到远程仓库
git push origin --tags

23. 移除本地标签
git tag -d <tag_name>

24. 移除远程标签
移除远程标签需要先移除本地标签
git push origin :refs/tags/<tag_name>

25. 切回到某个标签
一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本
git checkout -b branch_name tag_name

26. 放弃工作区的更改
git checkout <file_name>
放弃所有更改
git checkout .

27. 恢复移除的文件
git rev-list -n 1 HEAD -- <file_path> # 得到 deleting_commit
git checkout <deleting_commit>^ -- <file_path> # 回到移除文件 deleting_commit 之前的状态

28. 以新增一个 commit 的方式还原某一个 commit 的更改
git revert <commit_id>

29. 回到某个 commit 的状态，并移除后面的 commit
git reset <commit-id> # 默认就是-mixed 参数。
git reset –mixed HEAD^ # 回退至上个版本，它将重置 HEAD 到另外一个 commit, 并且重置暂存区以便和 HEAD 相匹配，但是也到此为止。工作区不会被更改。
git reset –soft HEAD~3 # 回退至三个版本之前，只回退了 commit 的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接 commit 即可
git reset –hard <commit-id> # 彻底回退到指定 commit-id 的状态，暂存区和工作区也会变为指定 commit-id 版本的内容

30. 更改上一个 commit 的描述
如果暂存区有改动，同时也会将暂存区的改动提交到上一个 commit
git commit --amend

31. 查看 commit 历史
git log

32. 查看某段代码的贡献者
git blame <file_name>

33. 显示本地更新过 HEAD 的 git 命令记录
git reflog

34. 更改作者名
git commit --amend --author='Author Name <email@address.com>'

35. 更改远程仓库的 url
git remote set-url origin <URL>

36. 增加远程仓库
git remote add origin <remote_url>

37. 举出所有远程仓库
git remote

38. 查看两个星期内的改动
git whatchanged --since='2 weeks ago'

39. 把 A 分支的某一个 commit，放到 B 分支上
git checkout <branch-name> && git cherry-pick <commit-id>

40. 保存当前的更改，但不用提交 commit
git stash

41. 储存当前状态，包括 untracked 的文件(新建的文件)
git stash -u

42. 显示所有 stashes
git stash list

43. 回到某个 stash 的状态
git stash apply <stash@{n}>

44. 回到最后一个 stash 的状态，并移除这个 stash
git stash pop

45. 移除所有的 stash
git stash clear

46. 从 stash 中拿出某个文件的更改
git checkout <stash@{n}> -- <file-path>

47. 显示所有 tracked 的文件
git ls-files -t

48. 显示所有 untracked 的文件
git ls-files --others

49. 显示所有忽略的文件
git ls-files --others -i --exclude-standard

50. 强制移除 untracked 的文件
git clean <file-name> -f

51. 强制移除 untracked 的目录
git clean <directory-name> -df

52. 显示简化的 commit 历史
git log --pretty=oneline --graph --decorate --all

53. 把某一个分支导出成一个文件
git bundle create <file> <branch-name>

54. 从包中导入分支
新建一个分支，分支内容就是上面 git bundle create 命令导出的内容
git clone repo.bundle <repo-dir> -b <branch-name>

55. 执行 rebase 之前自动 stash
git rebase --autostash

56. 从远程仓库根据 ID，拉下某一状态，到本地分支
git fetch origin pull/<id>/head:<branch-name>

57. 详细显示一行中的更改
git diff --word-diff


58. 显示所有 alias 和 configs
git config --local --list (当前目录)
git config --global --list (全局)

59. 显示忽略的文件
git status --ignored


60. commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit
git log Branch1 ^Branch2

61. 在 commit log 中显示 GPG 签名
git log --show-signature


62. 移除全局设置
git config --global --unset <entry-name>


63. 新建并切换到新分支上，同时这个分支没有任何 commit
相当于储存更改，但是重写 commit 历史
git checkout --orphan <branch-name>

64. 显示任意分支某一文件的内容
git show <branch-name>:<file-name>

65. clone 下来指定的单一分支
git clone -b <branch-name> --single-branch https://github.com/user/repo.git

66. 忽略某个文件的改动
关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动
git update-index --assume-unchanged path/to/file

67. 恢复 track 指定文件的改动
git update-index --no-assume-unchanged path/to/file

68. 忽略文件的权限变化
不再将文件的权限变化视作改动
git config core.fileMode false

69. 以最后提交的顺序举出所有 Git 分支
最新的放在最上面
git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/

70. 在 commit log 中查找相关内容
通过 grep 查找，given-text：所需要查找的字段
git log --all --grep='<given-text>'

71. 把暂存区的指定 file 放到工作区中
不添加参数，默认是 -mixed
git reset <file-name>

72. 强制 Push
git push -f <remote-name> <branch-name>










